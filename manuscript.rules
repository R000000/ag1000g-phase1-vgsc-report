# Manuscript
# ==========
#
# This snakefile has rules to build the main manuscript, including all artwork and tables.
#
# N.B., all rules in this file assume that all source files, including any data required,
# are present within the GitHub repository. Thus it should be possible to execute all rules
# within the CI environment.
#

# Setup
# -----
#
# Rules in this section include source and setup scripts, to ensure any changes in these will
# trigger a rebuild.
#

rule src:
    output:
        "src/python/zcache.py",
        "src/python/veff.py",
        "src/python/util.py",

rule setup:
    input:
        rules.src.output,
        "notebooks/setup.ipynb",
    output:
        "build/notebooks/setup.md",
    shell:
        "./nbexec.sh notebooks/setup.ipynb"

rule hapclust_utils:
    input:
        rules.src.output,
        rules.setup.output,
        "notebooks/hapclust_utils.ipynb",
    output:
        "build/notebooks/hapclust_utils.md",
    shell:
        "./nbexec.sh notebooks/hapclust_utils.ipynb"

# Artwork
# -------
#
# Rules in this section build artwork (figures, figure components, etc.).
#

rule artwork_demo:
    # Example of how to include a Jupyter notebook in the artwork build.
    input:
        rules.setup.output,
        "notebooks/artwork_demo.ipynb",
    output:
        "build/notebooks/artwork_demo.md",
        "artwork/demo.png",
    shell:
        "./nbexec.sh notebooks/artwork_demo.ipynb"

rule hapclust_demo:
    # Demo notebook using the haplotype clustering functions.
    input:
        rules.setup.output,
        rules.hapclust_utils.output,
        "notebooks/hapclust_demo.ipynb",
    output:
        "build/notebooks/hapclust_demo.md",
    shell:
        "./nbexec.sh notebooks/hapclust_demo.ipynb"

rule locate_recombinants_demo:
    # Demo notebook on locating recombinant haplotypes.
    input:
        rules.setup.output,
        rules.hapclust_utils.output,
        "notebooks/locate_recombinants_demo.ipynb",
    output:
        "build/notebooks/locate_recombinants_demo.md",
    shell:
        "./nbexec.sh notebooks/locate_recombinants_demo.ipynb"

rule artwork:
    # Build all artwork.
    input:
        rules.artwork_demo.output,
        rules.hapclust_demo.output,
        rules.locate_recombinants_demo.output,
        # add more inputs here as required
    output:
        touch("build/manuscript.artwork.done")

# Tables
# ------
#
# Rules in this section build tables for the manuscript.
#

rule table_demo:
    # Demo of a notebook that builds a latex table.
    input:
        rules.setup.output,
        "notebooks/table_demo.ipynb",
    output:
        "build/notebooks/table_demo.md",
        "tables/demo.tex"
    shell:
        "./nbexec.sh notebooks/table_demo.ipynb"

rule table_variants_missense:
    # Build the LaTex table of missense variants in VGSC.
    input:
        rules.setup.output,
        "notebooks/table_variants_missense.ipynb",
        "data/tbl_variants_phase1.pkl",
    output:
        "build/notebooks/table_variants_missense.md",
        "tables/variants_missense.tex"
    shell:
        "./nbexec.sh notebooks/table_variants_missense.ipynb"

rule tables:
    # Build all tables.
    input:
        rules.table_demo.output,
        rules.table_variants_missense.output,
        # add more inputs here as required
    output:
        touch("build/manuscript.tables.done")

#
# Main manuscript
# ---------------
#

rule main:
    # Build the manuscript PDF file. This rule should depend on all artwork and tables.
    input:
        rules.artwork.output,
        rules.tables.output,
        "main.tex",
        "refs.bib",
        # add more inputs here as required
    output:
        "build/main.pdf",
        touch("build/manuscript.main.done")
    shell:
        "./latex.sh"

#
# Utilities
# ---------
#

rule all:
    # Build everything.
    input:
        rules.main.output,
    output:
        touch("build/manuscript.done")

rule clean:
    # Clean out the build folder.
    shell:
        "rm -rvf build/*"
